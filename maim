-- Создание базы данных
CREATE DATABASE StudentsDB;
GO

-- Использование базы данных
USE StudentsDB;
GO

-- Создание таблицы Majors
CREATE TABLE Majors (
    major_id INT PRIMARY KEY IDENTITY(1,1),
    major_name NVARCHAR(100) NOT NULL
);
GO

-- Создание таблицы Groups
CREATE TABLE Groups (
    group_id INT PRIMARY KEY IDENTITY(1,1),
    group_number NVARCHAR(50) NOT NULL,
    major_id INT NOT NULL,
    FOREIGN KEY (major_id) REFERENCES Majors(major_id)
);
GO

-- Создание таблицы Students
CREATE TABLE Students (
    student_id INT PRIMARY KEY IDENTITY(1,1),
    first_name NVARCHAR(50) NOT NULL,
    last_name NVARCHAR(50) NOT NULL,
    middle_name NVARCHAR(50),
    birth_date DATE NOT NULL,
    city NVARCHAR(100) NOT NULL,
    street NVARCHAR(100) NOT NULL,
    house_number NVARCHAR(10) NOT NULL,
    email NVARCHAR(100) NOT NULL,
    group_id INT NOT NULL,
    scholarship BIT NOT NULL,
    FOREIGN KEY (group_id) REFERENCES Groups(group_id)
);
GO

-- Создание таблицы Phones
CREATE TABLE Phones (
    phone_id INT PRIMARY KEY IDENTITY(1,1),
    student_id INT NOT NULL,
    phone_number NVARCHAR(15) NOT NULL,
    FOREIGN KEY (student_id) REFERENCES Students(student_id)
);
GO

-- Внесение данных в таблицу Majors
INSERT INTO Majors (major_name) VALUES ('Программная инженерия');
INSERT INTO Majors (major_name) VALUES ('Механическая инженерия');
INSERT INTO Majors (major_name) VALUES ('Бизнес-администрирование');
GO

-- Внесение данных в таблицу Groups
INSERT INTO Groups (group_number, major_id) VALUES ('PE101', 1);
INSERT INTO Groups (group_number, major_id) VALUES ('PE102', 1);
INSERT INTO Groups (group_number, major_id) VALUES ('ME201', 2);
INSERT INTO Groups (group_number, major_id) VALUES ('ME202', 2);
INSERT INTO Groups (group_number, major_id) VALUES ('BA301', 3);
INSERT INTO Groups (group_number, major_id) VALUES ('BA302', 3);
GO

-- Внесение данных в таблицу Students
INSERT INTO Students (first_name, last_name, middle_name, birth_date, city, street, house_number, email, group_id, scholarship) 
VALUES 
('Иван', 'Иванов', 'Иванович', '2000-05-15', 'Москва', 'Ленинградский проспект', '10', 'ivan.ivanov@example.com', 1, 1),
('Мария', 'Петрова', 'Петровна', '1999-07-20', 'Санкт-Петербург', 'Невский проспект', '22', 'maria.petrova@example.com', 1, 0),
('Алексей', 'Смирнов', 'Алексеевич', '2001-02-10', 'Новосибирск', 'Красный проспект', '33', 'alexey.smirnov@example.com', 1, 1),
('Анна', 'Кузнецова', 'Андреевна', '2002-09-15', 'Екатеринбург', 'Свердловская улица', '44', 'anna.kuznetsova@example.com', 2, 0),
('Дмитрий', 'Соколов', 'Владимирович', '1998-12-25', 'Казань', 'Пушкина улица', '55', 'dmitry.sokolov@example.com', 2, 1),
('Елена', 'Попова', 'Сергеевна', '2000-03-05', 'Челябинск', 'Ленина улица', '66', 'elena.popova@example.com', 3, 0),
('Сергей', 'Васильев', 'Николаевич', '2001-08-12', 'Самара', 'Московское шоссе', '77', 'sergey.vasilev@example.com', 3, 1);
GO

-- Внесение данных в таблицу Phones
INSERT INTO Phones (student_id, phone_number) VALUES (1, '123-456-7890');
INSERT INTO Phones (student_id, phone_number) VALUES (2, '234-567-8901');
INSERT INTO Phones (student_id, phone_number) VALUES (3, '345-678-9012');
INSERT INTO Phones (student_id, phone_number) VALUES (4, '456-789-0123');
INSERT INTO Phones (student_id, phone_number) VALUES (5, '567-890-1234');
INSERT INTO Phones (student_id, phone_number) VALUES (6, '678-901-2345');
INSERT INTO Phones (student_id, phone_number) VALUES (7, '789-012-3456');
GO

-- Создание таблицы Teachers
CREATE TABLE Teachers (
    teacher_id INT PRIMARY KEY IDENTITY(1,1),
    first_name NVARCHAR(50) NOT NULL,
    last_name NVARCHAR(50) NOT NULL,
    middle_name NVARCHAR(50)
);
GO

-- Создание таблицы Subjects
CREATE TABLE Subjects (
    subject_id INT PRIMARY KEY IDENTITY(1,1),
    subject_name NVARCHAR(100) NOT NULL,
    major_id INT NOT NULL,
    teacher_id INT NOT NULL,
    FOREIGN KEY (major_id) REFERENCES Majors(major_id),
    FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id)
);
GO

-- Создание таблицы Grades
CREATE TABLE Grades (
    grade_id INT PRIMARY KEY IDENTITY(1,1),
    student_id INT NOT NULL,
    subject_id INT NOT NULL,
    grade INT CHECK (grade IN (2, 3, 4, 5)),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (subject_id) REFERENCES Subjects(subject_id)
);
GO

-- Внесение данных в таблицу Teachers
INSERT INTO Teachers (first_name, last_name, middle_name) VALUES ('Александр', 'Федоров', 'Николаевич');
INSERT INTO Teachers (first_name, last_name, middle_name) VALUES ('Борис', 'Иванов', 'Сергеевич');
INSERT INTO Teachers (first_name, last_name, middle_name) VALUES ('Виктория', 'Петрова', 'Александровна');
INSERT INTO Teachers (first_name, last_name, middle_name) VALUES ('Галина', 'Сидорова', 'Владимировна');
INSERT INTO Teachers (first_name, last_name, middle_name) VALUES ('Дмитрий', 'Кузнецов', 'Андреевич');
GO

-- Внесение данных в таблицу Subjects
INSERT INTO Subjects (subject_name, major_id, teacher_id) VALUES ('Математика', 1, 1);
INSERT INTO Subjects (subject_name, major_id, teacher_id) VALUES ('Физика', 1, 2);
INSERT INTO Subjects (subject_name, major_id, teacher_id) VALUES ('Информатика', 1, 3);
INSERT INTO Subjects (subject_name, major_id, teacher_id) VALUES ('Механика', 2, 2);
INSERT INTO Subjects (subject_name, major_id, teacher_id) VALUES ('Термодинамика', 2, 4);
INSERT INTO Subjects (subject_name, major_id, teacher_id) VALUES ('Менеджмент', 3, 5);
INSERT INTO Subjects (subject_name, major_id, teacher_id) VALUES ('Бухгалтерский учет', 3, 5);
GO

-- Внесение данных в таблицу Grades
-- Пример внесения оценок
INSERT INTO Grades (student_id, subject_id, grade) VALUES (1, 1, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (1, 2, 4);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (1, 3, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (2, 1, 3);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (2, 2, 4);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (2, 3, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (3, 1, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (3, 2, 3);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (3, 3, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (4, 4, 4);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (4, 5, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (5, 4, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (5, 5, 4);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (6, 6, 5);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (6, 7, 3);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (7, 6, 4);
INSERT INTO Grades (student_id, subject_id, grade) VALUES (7, 7, 5);
GO

-- Запросы

-- 1. Списки групп по каждому предмету с указанием преподавателя
SELECT 
    g.group_number,
    sub.subject_name,
    t.last_name + ' ' + t.first_name + ' ' + ISNULL(t.middle_name, '') AS teacher_name
FROM Groups g
JOIN Students s ON g.group_id = s.group_id
JOIN Grades gr ON s.student_id = gr.student_id
JOIN Subjects sub ON gr.subject_id = sub.subject_id
JOIN Teachers t ON sub.teacher_id = t.teacher_id
GROUP BY g.group_number, sub.subject_name, t.last_name, t.first_name, t.middle_name;
GO

-- 2. Дисциплина, которую изучает максимальное количество студентов
SELECT TOP 1 
    sub.subject_name,
    COUNT(gr.student_id) AS student_count
FROM Grades gr
JOIN Subjects sub ON gr.subject_id = sub.subject_id
GROUP BY sub.subject_name
ORDER BY COUNT(gr.student_id) DESC;
GO

-- 3. Количество студентов, обучающихся у каждого преподавателя
SELECT 
    t.last_name + ' ' + t.first_name + ' ' + ISNULL(t.middle_name, '') AS teacher_name,
    COUNT(DISTINCT gr.student_id) AS student_count
FROM Teachers t
JOIN Subjects sub ON t.teacher_id = sub.teacher_id
JOIN Grades gr ON sub.subject_id = gr.subject_id
GROUP BY t.last_name, t.first_name, t.middle_name;
GO

-- 4. Доля сдавших студентов по каждой дисциплине
SELECT 
    sub.subject_name,
    CAST(SUM(CASE WHEN gr.grade > 2 THEN 1 ELSE 0 END) AS FLOAT) / COUNT(gr.student_id) AS pass_rate
FROM Grades gr
JOIN Subjects sub ON gr.subject_id = sub.subject_id
GROUP BY sub.subject_name;
GO

-- 5. Средняя оценка по предметам (для сдавших студентов)
SELECT 
    sub.subject_name,
    AVG(CAST(gr.grade AS FLOAT)) AS average_grade
FROM Grades gr
JOIN Subjects sub ON gr.subject_id = sub.subject_id
WHERE gr.grade > 2
GROUP BY sub.subject_name;
GO

-- 6. Группа с максимальной средней оценкой (включая не сдавших)
SELECT TOP 1 
    g.group_number,
    AVG(CAST(gr.grade AS FLOAT)) AS average_grade
FROM Grades gr
JOIN Students s ON gr.student_id = s.student_id
JOIN Groups g ON s.group_id = g.group_id
GROUP BY g.group_number
ORDER BY AVG(CAST(gr.grade AS FLOAT)) DESC;
GO

-- 7. Студенты со всеми оценками отлично и не имеющих несданный экзамен
SELECT 
    s.last_name + ' ' + s.first_name + ' ' + ISNULL(s.middle_name, '') AS full_name
FROM Students s
WHERE s.student_id NOT IN (
    SELECT student_id
    FROM Grades
    WHERE grade < 4
)
AND s.student_id IN (
    SELECT student_id
    FROM Grades
    GROUP BY student_id
    HAVING COUNT(grade) = (
        SELECT COUNT(subject_id)
        FROM Subjects
    )
);
GO

-- 8. Кандидаты на отчисление (не сдано не менее двух предметов)
SELECT 
    s.last_name + ' ' + s.first_name + ' ' + ISNULL(s.middle_name, '') AS full_name
FROM Students s
WHERE s.student_id IN (
    SELECT student_id
    FROM Grades
    WHERE grade = 2 OR grade IS NULL
    GROUP BY student_id
    HAVING COUNT(subject_id) >= 2
);
GO
